package bookStore.model.module;


import bookStore.model.module.common.StudentChoresAM;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 29 14:58:23 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class StudentChoresAMImpl extends ApplicationModuleImpl implements StudentChoresAM {
    /**
     * This is the default constructor (do not remove).
     */
    public StudentChoresAMImpl() {
    }

    public void refreshBooksTextualVO() {
        ViewObjectImpl vo = getBooksTextualVOInstance();
        vo.forceExecuteQueryOfSharedVO();
    }

    public void applyVCForQueryRecordVO(String b_UName) {
        //debug log
        System.out.println("------------------StudentChoresAMImpl.applyVCForQueryRecordVO------------------");
        System.out.println("b_UName : " + b_UName);

        ViewObjectImpl vo = this.getQueryRecordVOInstance();
        vo.removeApplyViewCriteriaName("QueryRecordByUserSeensVOCriteria");
        ViewCriteria vc = vo.getViewCriteria("QueryRecordByUNameVOCriteria");
        vc.resetCriteria();
        VariableValueManager vvm = vc.ensureVariableManager();
        vvm.setVariableValue("b_UName", b_UName);
        vo.applyViewCriteria(vc, true);
        vo.executeQuery();

        System.out.println("------------------StudentChoresAMImpl.applyVCForQueryRecordVO END------------------");
    }


    public void applyVCForUsersVO(String bindVariableValue) {
        //debug log
        System.out.println("------------------StudentChoresAMImpl.applyVCForUsersVO------------------");
        System.out.println("bindVariableValue : " + bindVariableValue);

        ViewObjectImpl vo = this.getUsersVOInstance();
        ViewCriteria vc = vo.getViewCriteria("UserByUNameVOCriteria");
        vc.resetCriteria();
        VariableValueManager vvm = vc.ensureVariableManager();
        vvm.setVariableValue("b_UName", bindVariableValue);

        //debug log
        /*
        System.out.println("before::");
        vo.reset();
        while (vo.hasNext()) {
            Row r = vo.next();
            System.out.println(" : " + vo.getCurrentRowIndex() + " - " +
                               r.getAttribute(0) + " - " + r.getAttribute(1));
        }
        */

        vo.applyViewCriteria(vc, true);
        vo.executeQuery();

        // Expexcting one as Uname is PK in Users
        System.out.println("getRowCount : " + vo.getRowCount());
        vo.reset();

        //debug log
        //after vo.executeQuery(); here it will show inconsistent behaviour i.e it do not show row at index 0, because at search page table stamping mecanism is also using same iterator so
        //this produce inconsistency due to concurrent use of same iterator, to see proper debug log use this method on empty jspx page without table
        /*
        System.out.println("after::");
        while (vo.hasNext()) {
            Row r = vo.next();
            System.out.println(" : " + vo.getCurrentRowIndex() + " - " +
                               r.getAttribute(0) + " - " + r.getAttribute(1));
        }
        */

        System.out.println("------------------StudentChoresAMImpl.applyVCForUsersVO END------------------");
    }

    public void applyVCForBooksTextualVO(String bindVariableValue) {
        //debug log
        System.out.println("------------------StudentChoresAMImpl.applyVCForBooksTextualVO------------------");
        System.out.println("bindVariableValue : " + bindVariableValue);

        ViewObjectImpl vo = getBooksTextualVOInstance();
        ViewCriteria vc = vo.getViewCriteria("BooksTextualVOCriteria");
        vc.resetCriteria();
        VariableValueManager vvm = vc.ensureVariableManager();
        vvm.setVariableValue("b_globalSearchString", bindVariableValue);

        //debug log
        /*
        System.out.println("before::");
        vo.reset();
        while (vo.hasNext()) {
            Row r = vo.next();
            System.out.println(" : " + vo.getCurrentRowIndex() + " - " +
                               r.getAttribute(0) + " - " + r.getAttribute(1));
        }
        */

        vo.applyViewCriteria(vc, true);
        vo.executeQuery();

        //debug log
        //after vo.executeQuery(); here it will show inconsistent behaviour i.e it do not show row at index 0, because at search page table stamping mecanism is also using same iterator so
        //this produce inconsistency due to concurrent use of same iterator, to see proper debug log use this method on empty jspx page without table
        /*
        System.out.println("after::");
        while (vo.hasNext()) {
            Row r = vo.next();
            System.out.println(" : " + vo.getCurrentRowIndex() + " - " +
                               r.getAttribute(0) + " - " + r.getAttribute(1));
        }
        */

        System.out.println("------------------StudentChoresAMImpl.applyVCForBooksTextualVO END------------------");
    }

    public void reserveBook(String userName, Number bookId) {
        System.out.println("------------------StudentChoresAMImpl.reserveBook END------------------");
        System.out.println("userName : " + userName + " - bookId : " + bookId);

        ViewObjectImpl booksVO = getBooksVOInstance();
        Row[] booksMatched =
            booksVO.findByKey(new Key(new Object[] { bookId }), -1);

        //debug log, it should be one because we are searching by PK
        System.out.println("booksMatched.length : " + booksMatched.length);

        if (booksMatched[0].getAttribute("Status").toString().trim().equals("BOOKED")) {
            throw new RuntimeException(String.format("BookId : %d, Status[beforeUpdate] : %s",
                                                     bookId.longValue(),
                                                     booksMatched[0].getAttribute("Status")));
        }
        booksMatched[0].setAttribute("Status", "BOOKED");

        ViewObjectImpl isuueRecordVO = getIssueRecordVOInstance();
        Row newIssueRecord = isuueRecordVO.createRow();

        SequenceImpl seq =
            new SequenceImpl("BOOK_STORE_SEQ", getDBTransaction());
        Number recordId = seq.getSequenceNumber();
        DBSequence recordIdDBSeq = new DBSequence(recordId);

        newIssueRecord.setAttribute("RecordId", recordIdDBSeq);
        newIssueRecord.setAttribute("UName", userName);
        newIssueRecord.setAttribute("BookId", bookId);

        Date issueDate =
            new Date(new java.sql.Date(System.currentTimeMillis()));
        newIssueRecord.setAttribute("IssueDate", issueDate);

        isuueRecordVO.insertRow(newIssueRecord);
        getDBTransaction().commit();
    }

    public void setBooksReservedVOBindVar(String b_UName) {
        System.out.println("------------------StudentChoresAMImpl.setBooksReservedVOBindVar------------------");
        System.out.println("b_UName : " + b_UName);

        ViewObjectImpl vo = getBooksReservedVOInstance();
        vo.setNamedWhereClauseParam("b_UName", b_UName);
        vo.executeQuery();
    }

    /**
     * Container's getter for BooksTextual1.
     * @return BooksTextual1
     */
    public ViewObjectImpl getBooksTextualVOInstance() {
        return (ViewObjectImpl)findViewObject("BooksTextualVOInstance");
    }

    /**
     * Container's getter for IssueRecord1.
     * @return IssueRecord1
     */
    public ViewObjectImpl getIssueRecordVOInstance() {
        return (ViewObjectImpl)findViewObject("IssueRecordVOInstance");
    }

    /**
     * Container's getter for Books1.
     * @return Books1
     */
    public ViewObjectImpl getBooksVOInstance() {
        return (ViewObjectImpl)findViewObject("BooksVOInstance");
    }


    public DBSequence getNextDBSequence() {
        return new DBSequence(new SequenceImpl("BOOK_STORE_SEQ",
                                               getDBTransaction()).getSequenceNumber());
    }

    /**
     * Container's getter for Users1.
     * @return Users1
     */
    public ViewObjectImpl getUsersVOInstance() {
        return (ViewObjectImpl)findViewObject("UsersVOInstance");
    }

    /**
     * Container's getter for BooksReserved1.
     * @return BooksReserved1
     */
    public ViewObjectImpl getBooksReservedVOInstance() {
        return (ViewObjectImpl)findViewObject("BooksReservedVOInstance");
    }

    /**
     * Container's getter for QueryRecord1.
     * @return QueryRecord1
     */
    public ViewObjectImpl getQueryRecordVOInstance() {
        return (ViewObjectImpl)findViewObject("QueryRecordVOInstance");
    }
}
