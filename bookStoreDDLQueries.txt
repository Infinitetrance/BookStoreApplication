-- To login into sqlplus 
username as sysdba;

show pdbs;

create pluggable database pdb_bookStore admin user dba1 identified by lockcode
  file_name_convert = ('pdbseed', 'pdb_bookStore');

sho pdbs;
alter pluggable database pdb_bookStore open;
sho pdbs;

sho con_name;
show user;
alter session set container=pdb_bookStore;
sho con_name;

{
alter pluggable database pdb_bookStore open;
alter session set container=pdb_bookStore;
}

GRANT create session TO dba1;
GRANT create table TO dba1;
GRANT create view TO dba1;
GRANT create any trigger TO dba1;
GRANT create any procedure TO dba1;
GRANT create sequence TO dba1;
GRANT create synonym TO dba1;

CREATE TABLESPACE tbs_perm
  DATAFILE 'bookStore_tbs_perm.dat' 
    SIZE 10M
    REUSE
    AUTOEXTEND ON NEXT 10M MAXSIZE 200M;

CREATE TEMPORARY TABLESPACE tbs_temp
  TEMPFILE 'bookStore_tbs_temp.dbf'
    SIZE 5M
    AUTOEXTEND ON;

alter user dba1
  default tablespace tbs_perm
  temporary tablespace tbs_temp;

ALTER USER dba1 QUOTA 100M ON tbs_perm;

sho user;
connect dba1/lockcode@localhost:1521/pdb_bookStore.oradev.oraclecorp.com;
sho user;
sho con_name;

-- To Connect using SQL Developer 
-- Username: dba1, Password: lockcode
-- Connection Type: Basic, Role: Default
-- Host: localhost, Port: 1521
-- Service Name: pdb_bookStore.oradev.oraclecorp.com;

select TABLESPACE_NAME, contents from USER_TABLESPACES;


CREATE TABLE USERS (
 U_NAME VARCHAR2(60) NOT NULL, 
 U_PASSWORD VARCHAR2(20) NOT NULL,
 U_DESCRIPTION VARCHAR2(600),
 USER_ID NUMBER(15,0) NOT NULL,
 FIRST_NAME VARCHAR2(30) NOT NULL,
 LAST_NAME VARCHAR2(30),
 GENDER CHAR(2) NOT NULL,
 EMAIL VARCHAR2(50) NOT NULL,
 USER_TYPE_CODE VARCHAR2(30) NOT NULL,
 ADDRESS_STREET VARCHAR2(40),
 ADDRESS_CITY VARCHAR2(40),
 ADDRESS_STATE VARCHAR2(40),
 ADDRESS_POSTAL_CODE NUMBER(6,0),
 ADDRESS_COUNTRY_CODE CHAR(2),
 MOBILE_PHONE_NUMBER NUMBER(10,0),
 CONSTRAINT PK_USERS PRIMARY KEY (U_NAME),
 CONSTRAINT UQ_USERS UNIQUE (USER_ID));

CREATE TABLE GROUPS (G_NAME VARCHAR2(200) NOT NULL,G_DESCRIPTION VARCHAR2(1000) NULL);
ALTER TABLE GROUPS ADD CONSTRAINT PK_GROUPS PRIMARY KEY (G_NAME);  

CREATE TABLE GROUPMEMBERS (G_NAME VARCHAR2(200) NOT NULL,G_MEMBER VARCHAR2(60) NOT NULL); 
ALTER TABLE GROUPMEMBERS ADD CONSTRAINT PK_GROUPMEMS PRIMARY KEY (G_NAME,G_MEMBER);
ALTER TABLE GROUPMEMBERS ADD CONSTRAINT FK1_GROUPMEMBERS FOREIGN KEY ( G_NAME ) REFERENCES GROUPS (G_NAME) ON DELETE CASCADE;
ALTER TABLE GROUPMEMBERS ADD CONSTRAINT FK2_GROUPMEMBERS FOREIGN KEY ( G_MEMBER ) REFERENCES USERS (U_NAME) ON DELETE CASCADE;

CREATE TABLE BOOKS(
 BOOK_ID NUMBER(15,0) NOT NULL,
 TITLE VARCHAR2(200) NOT NULL,
 AUTHOR1 VARCHAR2(60) NOT NULL,
 AUTHOR2 VARCHAR2(60),
 AUTHOR3 VARCHAR2(60),
 CATEGORY VARCHAR2(50) NOT NULL,
 AVAILABLE CHAR(9) NOT NULL, 
 CONSTRAINT PK_BOOKS PRIMARY KEY (BOOK_ID));

CREATE TABLE ISSUE_RECORDS(
 RECORD_ID NUMBER(15,0) NOT NULL,
 U_NAME VARCHAR2(60) NOT NULL,
 BOOK_ID NUMBER(15,0) NOT NULL,
 ISSUE_DATE DATE NOT NULL,
 RETURN_DATE DATE,
 CONSTRAINT PK_ISSUE_RECORDS PRIMARY KEY (RECORD_ID),
 CONSTRAINT FK_U_NAME_ISSUE_RECORDS FOREIGN KEY (U_NAME) REFERENCES USERS (U_NAME),
 CONSTRAINT FK_BOOK_ID_ISSUE_RECORDS FOREIGN KEY (BOOK_ID) REFERENCES BOOKS (BOOK_ID));

CREATE TABLE QUERY_RECORD(
 RECORD_ID NUMBER(15,0) NOT NULL,
 LOGGED_BY VARCHAR2(60) NOT NULL,
 RESOLVED_BY VARCHAR2(60),
 QUERY VARCHAR2(600) NOT NULL,
 FIX VARCHAR2(600),
 LOGGED_ON DATE NOT NULL,
 RESOLVED_ON DATE,
 CONSTRAINT PK_QUERY_RECORD PRIMARY KEY (RECORD_ID),
 CONSTRAINT FK_LOGGED_BY_QUERY_RECORD FOREIGN KEY (LOGGED_BY) REFERENCES USERS (U_NAME),
 CONSTRAINT FK_RESOLVED_BY_QUERY_RECORD FOREIGN KEY (RESOLVED_BY) REFERENCES USERS (U_NAME));
-- TODO ADD CHECK CONSTRAINT TO RESOLVED_BY IT MUST BE LIBRARIAN 

CREATE TABLE LOOKUP_CODES(
 LOOKUP_TYPE VARCHAR2(30) NOT NULL,
 LOOKUP_CODE VARCHAR2(30) NOT NULL,
 MEANING VARCHAR2(80) NOT NULL,
 CONSTRAINT PK_LOOKUP_CODES PRIMARY KEY (LOOKUP_TYPE, LOOKUP_CODE));

-- NOT WORKING 
ALTER TABLE QUERY_RECORD
ADD CONSTRAINT CHK_RESOLVED_BY_QUERY_RECORD
  CHECK (getUserTypeCode(RESOLVED_BY) != 'STUDENT');

ALTER TABLE QUERY_RECORD
DROP CONSTRAINT CHK_RESOLVED_BY_QUERY_RECORD;

CREATE OR REPLACE FUNCTION getUserTypeCode(
p_uName USERS.U_NAME%TYPE) RETURN VARCHAR2
IS
 l_userTypeCode USERS.USER_TYPE_CODE%TYPE;
BEGIN
 SELECT USER_TYPE_CODE INTO l_userTypeCode FROM USERS WHERE U_NAME = p_uName;
 RETURN l_userTypeCode;
 EXCEPTION
  WHEN OTHERS THEN
   RETURN NULL;
END;

EXECUTE DBMS_OUTPUT.PUT_LINE(GETUSERTYPECODE('Moon'));

DECLARE
 l_userTypeCode USERS.USER_TYPE_CODE%TYPE;
BEGIN
 l_userTypeCode := GETUSERTYPECODE('SunY');
 IF l_userTypeCode IS NULL then
  DBMS_OUTPUT.PUT_LINE('l_userTypeCode IS NULL');
 ELSE
  DBMS_OUTPUT.PUT_LINE('l_userTypeCode = '||l_userTypeCode);
 END IF;
END;
/

INSERT INTO USERS (U_NAME,U_PASSWORD,U_DESCRIPTION,USER_ID,FIRST_NAME,LAST_NAME,GENDER,EMAIL,USER_TYPE_CODE,
ADDRESS_STREET,ADDRESS_CITY,ADDRESS_STATE,ADDRESS_POSTAL_CODE,ADDRESS_COUNTRY_CODE,MOBILE_PHONE_NUMBER)
VALUES ('Sun','Sun123','librarian',1,'Surya',NULL,'M','sun@bookStore.com','LIBRARIAN',NULL,NULL,NULL,NULL,'IN',NULL);

ALTER TABLE USERS ADD CONSTRAINT CHK_GENDER_USERS CHECK 
(GENDER IN ('M','F','D'));

ALTER TABLE USERS ADD CONSTRAINT CHK_USER_TYPE_CODE_USERS CHECK 
(USER_TYPE_CODE IN ('BS_E_STUDENT','BS_E_LIBRARIAN','BS_E_ADMINISTRATOR'));

ALTER TABLE BOOKS ADD CONSTRAINT CHK_STATUS_BOOKS CHECK 
(STATUS IN ('BOOKED','AVAILABLE'));

CREATE SEQUENCE BOOK_STORE_SEQ INCREMENT BY 1 MAXVALUE 999999999999 MINVALUE 100 CACHE 20 ;

CREATE TABLE CATEGORIES (
 ID NUMBER(15,0) NOT NULL,
 NAME VARCHAR2(30) NOT NULL,
 DESCRIPTION VARCHAR2(100),
 CONSTRAINT PK_CATEGORIES PRIMARY KEY (ID),
 CONSTRAINT UQ_CATEGORIES  UNIQUE (NAME));

CREATE TABLE CATEGORIES_MAPPING (
 PARENT_CATEGORY_ID NUMBER(15,0), 
 CATEGORY_ID NUMBER(15,0) NOT NULL,
 CONSTRAINT FK_CATEGORY_ID_CATEGORIES_MAPPING FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES (ID) ON DELETE CASCADE,
 CONSTRAINT FK_PARENT_CATEGORY_ID_CATEGORIES_MAPPING FOREIGN KEY (PARENT_CATEGORY_ID) REFERENCES CATEGORIES (ID),
 CONSTRAINT UQ_CATEGORIES_MAPPING  UNIQUE (CATEGORY_ID,PARENT_CATEGORY_ID));

ALTER TABLE BOOKS ADD PARENT_CATEGORY NUMBER(15,0);
ALTER TABLE BOOKS MODIFY (CATEGORY NUMBER(15,0));

ALTER TABLE BOOKS ADD CONSTRAINT FK_CATEGORY_BOOKS FOREIGN KEY ( CATEGORY ) REFERENCES CATEGORIES (ID);
ALTER TABLE BOOKS ADD CONSTRAINT FK_PARENT_CATEGORY_BOOKS FOREIGN KEY ( PARENT_CATEGORY ) REFERENCES CATEGORIES (ID);

CREATE VIEW BOOK_CATEGORIES AS
 SELECT CATEGORIES.ID, CATEGORIES.NAME, CATEGORIES.DESCRIPTION, CATEGORIES_MAPPING.PARENT_CATEGORY_ID
 FROM CATEGORIES INNER JOIN CATEGORIES_MAPPING ON CATEGORIES.ID = CATEGORIES_MAPPING.CATEGORY_ID;

CREATE OR REPLACE VIEW BOOKS_TEXTUAL AS
SELECT Book_Id, TITLE, 
author1 || ' , ' || author2 as Author, 
(SELECT NAME FROM CATEGORIES WHERE ID = PARENT_CATEGORY) AS PARENT_CATEGORY,
(SELECT NAME FROM CATEGORIES WHERE ID = CATEGORY) AS CATEGORY,
STATUS
FROM BOOKS;

SELECT Book_Id, TITLE, 
author1 || ' , ' || author2 as Author, 
(SELECT NAME FROM CATEGORIES WHERE ID = PARENT_CATEGORY) AS PARENT_CATEGORY,
(SELECT NAME FROM CATEGORIES WHERE ID = CATEGORY) AS CATEGORY,
STATUS, DESCRIPTION
FROM BOOKS

CREATE OR REPLACE VIEW QUERY_RECORD_STATUS_PIE_VIEW 
(STATUS ,NO_OF_QUERIES, CONSTRAINT PK_STATUS PRIMARY KEY(STATUS) RELY DISABLE NOVALIDATE) AS
SELECT STATUS, COUNT(*) AS NO_OF_QUERIES 
FROM QUERY_RECORD 
GROUP BY STATUS;

CREATE OR REPLACE VIEW ISSUE_RECORD_RESERVE_FREQUENCY_VIEW 
(BOOK_ID ,RESERVE_FREQUENCY, CONSTRAINT PK_BOOK_ID_ISSUE_RECORD_RESERVE_FREQUENCY_VIEW PRIMARY KEY(BOOK_ID) RELY DISABLE NOVALIDATE) AS
SELECT BOOK_ID, COUNT(*) 
FROM ISSUE_RECORDS 
GROUP BY BOOK_ID;
